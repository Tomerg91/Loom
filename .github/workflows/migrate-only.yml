name: Migrate Database (Manual)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to migrate (production/staging)'
        required: true
        default: 'production'

jobs:
  migrate:
    name: Run Supabase Migrations
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate database secrets (with repo-level fallback)
        shell: bash
        run: |
          # Gather candidates from environment and repository secrets
          ENV_DB_URL='${{ secrets.DATABASE_URL }}'
          REPO_DB_URL='${{ secrets.REPO_DATABASE_URL }}'
          PROD_DB_URL='${{ secrets.PRODUCTION_DATABASE_URL }}'
          ALT_DB_URL='${{ secrets.DB_URL }}'

          # Pick first non-empty
          DB_URL="${ENV_DB_URL}"
          if [ -z "$DB_URL" ]; then DB_URL="$REPO_DB_URL"; fi
          if [ -z "$DB_URL" ]; then DB_URL="$PROD_DB_URL"; fi
          if [ -z "$DB_URL" ]; then DB_URL="$ALT_DB_URL"; fi

          if [ -z "$DB_URL" ]; then
            echo "::error::DATABASE_URL secret is not set for environment '${{ github.event.inputs.environment }}' or repository fallbacks (REPO_DATABASE_URL/PRODUCTION_DATABASE_URL/DB_URL)." && exit 1
          fi

          # Mask and show minimal info to help debugging
          REDACTED=$(echo "$DB_URL" | sed -E 's#://[^:@]+:[^@]+@#://***:***@#')
          echo "Using DATABASE_URL (redacted): ${REDACTED}"
          if [[ "$DB_URL" == *"supabase.co"* && "$DB_URL" != *"sslmode="* ]]; then
            echo "::warning::DATABASE_URL appears to be a Supabase URL without sslmode=require. Appending for this job."
            echo "DATABASE_URL_WITH_SSL=${DB_URL}?sslmode=require" >> $GITHUB_ENV
          else
            echo "DATABASE_URL_WITH_SSL=${DB_URL}" >> $GITHUB_ENV
          fi

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Install psql client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Test DB connectivity (non-blocking)
        id: conn
        env:
          DATABASE_URL: ${{ env.DATABASE_URL_WITH_SSL }}
        run: |
          set +e
          OK=false
          # Resolve IPv4 for Supabase host and force IPv4 to avoid IPv6 issues on runners
          HOSTNAME=$(node -e "try{const u=new URL(process.env.DATABASE_URL);console.log(u.hostname)}catch(e){process.exit(1)}") || { echo "::warning::Failed to parse hostname from DATABASE_URL"; }
          if [ -n "$HOSTNAME" ]; then
            if command -v getent >/dev/null 2>&1; then
              IPV4=$(getent ahostsv4 "$HOSTNAME" | awk '{print $1; exit}')
            else
              IPV4=$(dig +short A "$HOSTNAME" | head -n1)
            fi
            if [ -n "$IPV4" ]; then
              echo "Using IPv4 $IPV4 for host $HOSTNAME"
              echo "PGHOSTADDR=$IPV4" >> $GITHUB_ENV
            else
              echo "::warning::Could not resolve IPv4 for $HOSTNAME; attempting default connection"
            fi
          fi
          psql "$DATABASE_URL" -c 'select 1;'
          if [ $? -eq 0 ]; then
            OK=true
          else
            echo "::warning::Direct Postgres connection failed; will attempt Supabase remote link if configured."
          fi
          echo "conn_ok=$OK" >> $GITHUB_OUTPUT

      - name: Run migrations via direct DB
        if: steps.conn.outputs.conn_ok == 'true'
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN || secrets.SUPABASE_TOKEN || secrets.REPO_SUPABASE_ACCESS_TOKEN }}
          DATABASE_URL: ${{ env.DATABASE_URL_WITH_SSL }}
          PGHOSTADDR: ${{ env.PGHOSTADDR }}
        run: |
          supabase db push --debug --db-url "$DATABASE_URL"

      - name: Link Supabase project (fallback)
        if: steps.conn.outputs.conn_ok != 'true'
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN || secrets.SUPABASE_TOKEN || secrets.REPO_SUPABASE_ACCESS_TOKEN }}
          FALLBACK_DB_URL: ${{ env.DATABASE_URL_WITH_SSL }}
          FALLBACK_PUBLIC_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL || secrets.REPO_NEXT_PUBLIC_SUPABASE_URL || secrets.PUBLIC_SUPABASE_URL }}
        run: |
          if [ -z "$SUPABASE_ACCESS_TOKEN" ]; then echo "::error::SUPABASE_ACCESS_TOKEN is required for remote linking." && exit 1; fi
          supabase login --token "$SUPABASE_ACCESS_TOKEN"
          REF="${{ secrets.SUPABASE_PROJECT_REF || secrets.PROJECT_REF }}"
          if [ -z "$REF" ]; then
            # Try to derive from DATABASE_URL (db.<ref>.supabase.co)
            if [ -n "$FALLBACK_DB_URL" ]; then
              HOST=$(node -e "try{const u=new URL(process.env.FALLBACK_DB_URL);console.log(u.hostname)}catch(e){process.exit(0)}")
              if [[ "$HOST" == db.*.supabase.co ]]; then
                REF=${HOST#db.}
                REF=${REF%.supabase.co}
              fi
            fi
          fi
          if [ -z "$REF" ] && [ -n "$FALLBACK_PUBLIC_URL" ]; then
            # Try to derive from NEXT_PUBLIC_SUPABASE_URL (<ref>.supabase.co)
            HOST=$(node -e "try{const u=new URL(process.env.FALLBACK_PUBLIC_URL);console.log(u.hostname)}catch(e){process.exit(0)}")
            if [[ "$HOST" == *.supabase.co ]]; then
              REF=${HOST%.supabase.co}
            fi
          fi
          if [ -z "$REF" ]; then echo "::error::SUPABASE_PROJECT_REF (or PROJECT_REF) not set and could not be derived from DATABASE_URL or NEXT_PUBLIC_SUPABASE_URL." && exit 1; fi
          supabase link --project-ref "$REF"

      - name: Run migrations via linked project (fallback)
        if: steps.conn.outputs.conn_ok != 'true'
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN || secrets.SUPABASE_TOKEN || secrets.REPO_SUPABASE_ACCESS_TOKEN }}
        run: |
          if [ -z "$SUPABASE_ACCESS_TOKEN" ]; then echo "::error::SUPABASE_ACCESS_TOKEN is required to run migrations via linked project." && exit 1; fi
          supabase login --token "$SUPABASE_ACCESS_TOKEN"
          supabase db push --debug
