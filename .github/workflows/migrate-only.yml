name: Migrate Database (Manual)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to migrate (production/staging)'
        required: true
        default: 'production'

jobs:
  migrate:
    name: Run Supabase Migrations
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate database secrets (with repo-level fallback)
        shell: bash
        run: |
          # Gather candidates from environment and repository secrets
          ENV_DB_URL='${{ secrets.DATABASE_URL }}'
          REPO_DB_URL='${{ secrets.REPO_DATABASE_URL }}'
          PROD_DB_URL='${{ secrets.PRODUCTION_DATABASE_URL }}'
          ALT_DB_URL='${{ secrets.DB_URL }}'

          # Pick first non-empty
          DB_URL="${ENV_DB_URL}"
          if [ -z "$DB_URL" ]; then DB_URL="$REPO_DB_URL"; fi
          if [ -z "$DB_URL" ]; then DB_URL="$PROD_DB_URL"; fi
          if [ -z "$DB_URL" ]; then DB_URL="$ALT_DB_URL"; fi

          if [ -z "$DB_URL" ]; then
            echo "::error::DATABASE_URL secret is not set for environment '${{ github.event.inputs.environment }}' or repository fallbacks (REPO_DATABASE_URL/PRODUCTION_DATABASE_URL/DB_URL)." && exit 1
          fi

          # Mask and show minimal info to help debugging
          REDACTED=$(echo "$DB_URL" | sed -E 's#://[^:@]+:[^@]+@#://***:***@#')
          echo "Using DATABASE_URL (redacted): ${REDACTED}"
          if [[ "$DB_URL" == *"supabase.co"* && "$DB_URL" != *"sslmode="* ]]; then
            echo "::warning::DATABASE_URL appears to be a Supabase URL without sslmode=require. Appending for this job."
            echo "DATABASE_URL_WITH_SSL=${DB_URL}?sslmode=require" >> $GITHUB_ENV
          else
            echo "DATABASE_URL_WITH_SSL=${DB_URL}" >> $GITHUB_ENV
          fi

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Install psql client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Test DB connectivity
        env:
          DATABASE_URL: ${{ env.DATABASE_URL_WITH_SSL }}
        run: |
          psql "$DATABASE_URL" -c 'select 1;' || (echo "::error::Failed to connect to Postgres. Check DATABASE_URL and network access." && exit 1)

      - name: Run database migrations
        env:
          # Fallbacks for token as well
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN || secrets.SUPABASE_TOKEN || secrets.REPO_SUPABASE_ACCESS_TOKEN }}
          DATABASE_URL: ${{ env.DATABASE_URL_WITH_SSL }}
        run: |
          if [ -z "$SUPABASE_ACCESS_TOKEN" ]; then echo "::warning::SUPABASE_ACCESS_TOKEN not set; supabase CLI may still work for db push if not required."; fi
          supabase db push --debug --db-url "$DATABASE_URL"
