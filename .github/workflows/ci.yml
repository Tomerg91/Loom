name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20.x'
  NEXT_TELEMETRY_DISABLED: 1

jobs:
  # Code Quality and Security Checks
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Type check
        run: npm run type-check
      
      - name: Lint code
        run: npm run lint
      
      - name: Check code formatting
        run: npm run format:check
      
      - name: Security audit
        run: npm audit --audit-level=moderate
        continue-on-error: true
      
      - name: Check for vulnerabilities
        run: |
          npx audit-ci --moderate
        continue-on-error: true

  # Unit and Integration Tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run unit tests
        run: npm run test:run
      
      - name: Run integration tests
        run: npm run test:integration
      
      - name: Generate coverage report
        run: npm run test:coverage
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # E2E Tests
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright
        run: npx playwright install --with-deps
      
      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
      
      - name: Start application
        run: |
          npm start &
          npx wait-on http://localhost:3000
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
      
      - name: Run E2E tests
        run: npm run test:e2e
      
      - name: Upload Playwright Report
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # Build and Deploy
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [quality, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: |
            .next/
            public/
          retention-days: 7

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Performance Testing
  lighthouse:
    name: Lighthouse Performance
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
      
      - name: Start application
        run: |
          npm start &
          npx wait-on http://localhost:3000
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
      
      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, e2e]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
      
      - name: Deploy to Vercel Staging
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-args: '--prebuilt'
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          scope: ${{ secrets.VERCEL_ORG_ID }}

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, e2e, security]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
      
      - name: Deploy to Vercel Production
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-args: '--prebuilt --prod'
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          scope: ${{ secrets.VERCEL_ORG_ID }}
      
      - name: Run post-deployment health checks
        run: |
          # Wait for deployment to be ready
          sleep 60
          
          # Basic health check
          curl -f ${{ secrets.PRODUCTION_URL }}/api/health || exit 1
          
          # Security headers check
          curl -I ${{ secrets.PRODUCTION_URL }} | grep -i "x-frame-options\|x-content-type-options\|strict-transport-security" || echo "Warning: Some security headers missing"
      
      - name: Notify deployment success
        if: success()
        run: |
          echo "‚úÖ Production deployment successful!"
          echo "üöÄ URL: ${{ secrets.PRODUCTION_URL }}"
      
      - name: Notify deployment failure
        if: failure()
        run: |
          echo "‚ùå Production deployment failed!"
          exit 1

  # Database Migration (Production)
  migrate-production:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest
      
      - name: Run database migrations
        run: |
          supabase db push --db-url ${{ secrets.DATABASE_URL }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

  # Slack Notifications
  notify-slack:
    name: Slack Notifications
    runs-on: ubuntu-latest
    needs: [quality, test, e2e, build, deploy-production, migrate-production]
    if: always() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
      - name: Notify Slack on Success
        if: contains(needs.*.result, 'success') && !contains(needs.*.result, 'failure')
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          title: '‚úÖ CI/CD Pipeline Completed Successfully'
          message: |
            üéâ All checks passed for `${{ github.ref_name }}`!
            
            üìã **Summary:**
            ‚Ä¢ Quality checks: ‚úÖ
            ‚Ä¢ Tests: ‚úÖ 
            ‚Ä¢ E2E tests: ‚úÖ
            ‚Ä¢ Build: ‚úÖ
            ‚Ä¢ Deployment: ‚úÖ
            ‚Ä¢ Migrations: ‚úÖ
            
            üìù **Details:**
            ‚Ä¢ Commit: `${{ github.sha }}`
            ‚Ä¢ Author: ${{ github.actor }}
            ‚Ä¢ Branch: `${{ github.ref_name }}`
            
            üîó [View Workflow](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          
      - name: Notify Slack on Failure
        if: contains(needs.*.result, 'failure')
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          title: '‚ùå CI/CD Pipeline Failed'
          message: |
            üö® Pipeline failed for `${{ github.ref_name }}`
            
            üìã **Failed Jobs:**
            ${{ needs.quality.result == 'failure' && '‚Ä¢ Quality checks: ‚ùå' || '' }}
            ${{ needs.test.result == 'failure' && '‚Ä¢ Tests: ‚ùå' || '' }}
            ${{ needs.e2e.result == 'failure' && '‚Ä¢ E2E tests: ‚ùå' || '' }}
            ${{ needs.build.result == 'failure' && '‚Ä¢ Build: ‚ùå' || '' }}
            ${{ needs.deploy-production.result == 'failure' && '‚Ä¢ Deployment: ‚ùå' || '' }}
            ${{ needs.migrate-production.result == 'failure' && '‚Ä¢ Migrations: ‚ùå' || '' }}
            
            üìù **Details:**
            ‚Ä¢ Commit: `${{ github.sha }}`
            ‚Ä¢ Author: ${{ github.actor }}
            ‚Ä¢ Branch: `${{ github.ref_name }}`
            
            üîó [View Failed Workflow](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            Please check the logs and fix the issues immediately.
            
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          
      - name: Notify Slack on Deployment Success
        if: needs.deploy-production.result == 'success' && github.ref == 'refs/heads/main'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          title: 'üöÄ Production Deployment Successful'
          message: |
            üéâ Successfully deployed to production!
            
            üìù **Deployment Details:**
            ‚Ä¢ Environment: Production
            ‚Ä¢ Version: `${{ github.sha }}`
            ‚Ä¢ Deployed by: ${{ github.actor }}
            ‚Ä¢ Branch: `${{ github.ref_name }}`
            
            üîó **Links:**
            ‚Ä¢ [Production App](${{ secrets.PRODUCTION_URL }})
            ‚Ä¢ [Health Check](${{ secrets.PRODUCTION_URL }}/api/health)
            ‚Ä¢ [Deployment Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          
      - name: Notify Slack on Critical Failure
        if: needs.deploy-production.result == 'failure' || needs.migrate-production.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#critical-alerts'
          title: 'üö® CRITICAL: Production Deployment/Migration Failed'
          message: |
            üö® **CRITICAL ALERT**: Production deployment or migration failed!
            
            ‚ö†Ô∏è **Impact:** Production environment may be in an inconsistent state
            
            üìù **Details:**
            ‚Ä¢ Deployment Status: ${{ needs.deploy-production.result }}
            ‚Ä¢ Migration Status: ${{ needs.migrate-production.result }}
            ‚Ä¢ Commit: `${{ github.sha }}`
            ‚Ä¢ Author: ${{ github.actor }}
            
            üîó [Emergency Response Runbook](https://your-docs-url.com/emergency-response)
            üîó [Failed Workflow](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            @channel - Immediate action required!
            
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}