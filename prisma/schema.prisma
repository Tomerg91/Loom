/// Prisma schema defining the Action Items & Homework task domain.
///
/// This schema introduces models and enums for tasks, instances, progress
/// updates, attachments, notification jobs, and export logs. Relationships
/// within the task domain are explicitly modelled while cross-boundary
/// associations (e.g., to Supabase auth tables) are represented via foreign key
/// identifiers so that Prisma can co-exist with the existing Supabase-managed
/// tables.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  OVERDUE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

enum NotificationJobType {
  ASSIGNMENT_CREATED
  UPCOMING_DUE
  OVERDUE
  RECURRING_PROMPT
}

enum NotificationJobStatus {
  PENDING
  SCHEDULED
  SENT
  FAILED
  CANCELLED
}

model TaskCategory {
  id        String   @id @default(uuid()) @db.Uuid
  coachId   String   @db.Uuid
  label     String
  colorHex  String   @db.VarChar(9)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tasks Task[]

  @@map("task_categories")
  @@index([coachId], map: "task_categories_coach_id_idx")
}

model Task {
  id                String       @id @default(uuid()) @db.Uuid
  coachId           String       @db.Uuid
  clientId          String       @db.Uuid
  categoryId        String?      @db.Uuid
  title             String
  description       String?
  priority          TaskPriority @default(MEDIUM)
  visibilityToCoach Boolean      @default(true)
  dueDate           DateTime?
  recurrenceRule    Json?
  archivedAt        DateTime?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  category  TaskCategory? @relation(fields: [categoryId], references: [id])
  instances TaskInstance[]

  @@map("tasks")
  @@index([coachId], map: "tasks_coach_id_idx")
  @@index([clientId, dueDate], map: "tasks_client_due_idx")
  @@index([categoryId], map: "tasks_category_id_idx")
}

model TaskInstance {
  id                   String      @id @default(uuid()) @db.Uuid
  taskId               String      @db.Uuid
  scheduledDate        DateTime?
  dueDate              DateTime
  status               TaskStatus  @default(PENDING)
  completionPercentage Int         @default(0)
  completedAt          DateTime?
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt

  task             Task              @relation(fields: [taskId], references: [id])
  progressUpdates  ProgressUpdate[]
  attachments      Attachment[]      @relation("InstanceAttachments")
  notificationJobs NotificationJob[] @relation("InstanceNotificationJobs")

  @@map("task_instances")
  @@index([taskId, dueDate], map: "task_instances_task_due_idx")
  @@index([dueDate, status], map: "task_instances_due_status_idx")
}

model ProgressUpdate {
  id                String      @id @default(uuid()) @db.Uuid
  taskInstanceId    String      @db.Uuid
  authorId          String      @db.Uuid
  percentage        Int
  note              String?
  isVisibleToCoach  Boolean     @default(true)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  taskInstance TaskInstance @relation(fields: [taskInstanceId], references: [id])
  attachments  Attachment[] @relation("ProgressAttachments")

  @@map("progress_updates")
  @@index([taskInstanceId], map: "progress_updates_instance_idx")
  @@index([authorId, createdAt], map: "progress_updates_author_created_idx")
}

model Attachment {
  id               String          @id @default(uuid()) @db.Uuid
  taskInstanceId   String?         @db.Uuid
  progressUpdateId String?         @db.Uuid
  fileUrl          String
  fileName         String
  fileSize         Int
  mimeType         String
  uploadedById     String          @db.Uuid
  createdAt        DateTime        @default(now())

  taskInstance TaskInstance?   @relation("InstanceAttachments", fields: [taskInstanceId], references: [id])
  progressUpdate ProgressUpdate? @relation("ProgressAttachments", fields: [progressUpdateId], references: [id])

  @@map("attachments")
  @@index([taskInstanceId], map: "attachments_task_instance_idx")
  @@index([progressUpdateId], map: "attachments_progress_update_idx")
}

model NotificationJob {
  id             String                @id @default(uuid()) @db.Uuid
  taskInstanceId String                @db.Uuid
  type           NotificationJobType
  status         NotificationJobStatus @default(PENDING)
  scheduledAt    DateTime
  payload        Json?
  createdAt      DateTime              @default(now())
  sentAt         DateTime?

  taskInstance TaskInstance @relation("InstanceNotificationJobs", fields: [taskInstanceId], references: [id])

  @@map("notification_jobs")
  @@index([taskInstanceId, status], map: "notification_jobs_instance_status_idx")
  @@index([scheduledAt], map: "notification_jobs_scheduled_at_idx")
}

model ExportLog {
  id          String   @id @default(uuid()) @db.Uuid
  coachId     String   @db.Uuid
  clientId    String   @db.Uuid
  generatedAt DateTime @default(now())
  fileUrl     String?
  filters     Json?
  createdAt   DateTime @default(now())
  completedAt DateTime?

  @@map("export_logs")
  @@index([coachId, clientId, generatedAt], map: "export_logs_coach_client_generated_idx")
}
