/**
 * @fileoverview Shared type definitions for the authentication module.
 *
 * These types formalize the contracts between the client React hooks in
 * `src/modules/auth/hooks/useMfa.ts` and the Next.js API routes that back
 * multi-factor authentication (MFA) operations. Centralizing the shapes here
 * keeps the UI, hooks, and route handlers aligned while we migrate legacy auth
 * code into the new module structure defined in the implementation plan.
 */

import type { MfaMethod, MfaSetupData } from '@/types';

/**
 * Server response returned from `/api/auth/mfa/setup` when the authenticated
 * user initiates MFA enrollment.
 */
export interface MfaSetupResponse extends MfaSetupData {
  /** Identifier supplied to authenticator apps when presenting the QR code. */
  manualEntryKey?: string;
  /** Display name for the application shown in authenticator apps. */
  appName?: string;
  /** Email address associated with the MFA enrollment. */
  accountName?: string;
}

/**
 * Payload forwarded to the enable endpoint once the user verifies the TOTP
 * code generated by their authenticator application.
 */
export interface MfaEnablePayload {
  /** One-time password code typed by the user. */
  totpCode: string;
  /** Secret issued during setup that will be persisted after verification. */
  secret: string;
  /** Backup codes generated during setup that should be stored server-side. */
  backupCodes: string[];
}

/**
 * Successful response returned after MFA is fully enabled for the account.
 */
export interface MfaEnableResponse {
  /** Whether MFA is now active for the user. */
  isEnabled: boolean;
  /** Timestamp of the verification event if provided by the API. */
  verifiedAt?: string;
  /** Remaining number of backup codes stored for the account. */
  backupCodesRemaining: number;
}

/**
 * Payload sent to verify MFA codes during sign-in.
 */
export interface MfaVerifyPayload {
  /** Identifier for the authenticated user that is completing verification. */
  userId: string;
  /** Code typed by the user (either TOTP or backup). */
  code: string;
  /** Method the user selected (TOTP or backup code). */
  method: MfaMethod;
}

/**
 * Response returned after a successful MFA verification attempt.
 */
export interface MfaVerifyResponse {
  /** Confirms the code was valid. */
  verified: boolean;
  /** Method that was validated for auditing and analytics. */
  method: MfaMethod;
  /** Remaining backup codes so we can surface warnings in the UI. */
  backupCodesRemaining: number;
  /** Optional warning message provided by the API. */
  warning?: string;
}

/**
 * Current MFA status fetched from `/api/auth/mfa/status` for the logged-in
 * user. This powers setup gating and security messaging across the app.
 */
export interface MfaStatusResponse {
  /** Whether MFA is fully enabled. */
  isEnabled: boolean;
  /** Whether initial setup has been started. */
  isSetup: boolean;
  /** Timestamp when MFA was last verified. */
  verifiedAt?: string;
  /** Count of remaining backup codes. */
  backupCodesRemaining: number;
  /** High-level state the API computes for us (e.g., `not_setup`). */
  state?: string;
  /** Recommended follow-up actions to present to the user. */
  nextActions?: string[];
  /** Optional warning messages, typically about backup codes. */
  warnings?: string[];
  /** Security recommendations for the account owner. */
  recommendations?: string[];
}

export type { MfaMethod, MfaSetupData };
